plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.talentpool'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.h2database:h2:2.2.224'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {

	dependsOn test

    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/infrastructure/**',
                '**/application/**',
                '**/commons/**',
                '**/dto/**',
				'**/domain/model/**',
				'**/domain/exceptions/**',
				'**/domain/utils/**',
                '**/mappers/**',
                '**/entities/**',
                '**/controllers/**'
            ])
        }))
    }
}

tasks.named('test') {
	useJUnitPlatform()
}
